{#
Copyright 2016 Google Inc. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#}


#{% set NAME_PREFIX = env['deployment'] + '-' + env['name'] %}

#TODO: come up with a better solution:
{% set ROOT_PASS = "aCrDh99M^naG@S6G" %} 

{% set NAME_PREFIX = env['name'] %}
{% set CLUSTER_NAME = NAME_PREFIX %}
{% set TYPE_NAME = NAME_PREFIX + '-type' %}
{% set K8S_ENDPOINTS = {'': 'api/v1', '-v1beta1-extensions': 'apis/extensions/v1beta1', '-apps-v1beta2': 'apis/apps/v1beta2'} %}
{% set ZONE = properties["zone"] %}

{% set CLUSTER_TYPE = env['project'] + '/' + TYPE_NAME %}
{% set SERVICE_COLLECTION = '/api/v1/namespaces/{namespace}/services' %}
{% set STATEFULL_SET_COLLECTION = '/apis/apps/v1beta2/namespaces/{namespace}/statefulsets' %}
{% set INGRESS_COLLECTION = '/apis/extensions/v1beta1/namespaces/{namespace}/ingresses' %}


{% macro zoneToRegion(zone) -%}
{{ zone.split('-')[0:2]|join('-') }}
{%- endmacro %}

resources:
- name: {{ CLUSTER_NAME }}
  type: container.v1.cluster
  properties:
    zone: {{ ZONE }}
    cluster:
      name: {{ CLUSTER_NAME }}
      initialNodeCount: {{ properties['initialNodeCount'] }}
      nodeConfig:
        machineType: {{ properties['machineType'] }}
        oauthScopes:
        - https://www.googleapis.com/auth/compute
        - https://www.googleapis.com/auth/devstorage.read_only
        - https://www.googleapis.com/auth/logging.write
        - https://www.googleapis.com/auth/monitoring
{% for typeSuffix, endpoint in K8S_ENDPOINTS.iteritems() %}
- name: {{ TYPE_NAME }}{{ typeSuffix }}
  type: deploymentmanager.v2beta.typeProvider
  properties:
    options:
      validationOptions:
        # Kubernetes API accepts ints, in fields they annotate with string.
        # This validation will show as warning rather than failure for
        # Deployment Manager.
        # https://github.com/kubernetes/kubernetes/issues/2971
        schemaValidation: IGNORE_WITH_WARNINGS
      # According to kubernetes spec, the path parameter 'name'
      # should be the value inside the metadata field
      # https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md
      # This mapping specifies that
      inputMappings:
      - fieldName: name
        location: PATH
        methodMatch: ^(GET|DELETE|PUT)$
        value: $.ifNull($.resource.properties.metadata.name, $.resource.name)
      - fieldName: metadata.name
        location: BODY
        methodMatch: ^(PUT|POST)$
        value: $.ifNull($.resource.properties.metadata.name, $.resource.name)
      - fieldName: Authorization
        location: HEADER
        value: >
          $.concat("Bearer ", $.googleOauth2AccessToken())
    descriptorUrl: https://$(ref.{{ CLUSTER_NAME }}.endpoint)/swaggerapi/{{ endpoint }}
{% endfor %}

# Deployglobal static IP address

- type: compute.v1.globalAddress
  name: {{ CLUSTER_NAME }}-address
    
# Deploy MapLarge master

- name: {{ CLUSTER_NAME }}-master-ss
  type: {{ CLUSTER_TYPE }}:{{ SERVICE_COLLECTION }}
  metadata:
    dependsOn:
    - {{ TYPE_NAME }}
    - {{ CLUSTER_NAME }}
  properties:
    apiVersion: v1
    kind: Service
    namespace: default
    metadata:
      name: ml-master
      labels:
        app: slb_maplarge_server
    spec:
      ports:
      - port: 80
        name: web
        #clusterIP: None
      selector:
        app: slb_maplarge_server
        role: master

# Deploy MapLarge master stateful set

- name: {{ CLUSTER_NAME }}-master-statefulset
  type: {{ CLUSTER_TYPE }}-apps-v1beta2:{{ STATEFULL_SET_COLLECTION }}
  metadata:
    dependsOn:
    - {{ CLUSTER_NAME }}-master-ss
    - {{ TYPE_NAME }}-apps-v1beta2
  properties:
    apiVersion: apps/v1beta2
    kind: StatefulSet
    namespace: default
    metadata:
      name: ml-master-ss
    spec:
      selector:
        matchLabels:
          app: slb_maplarge_server
          role: master
      serviceName: ml-master-ss
      replicas: 1
      template:
        metadata:
          labels:
            app: slb_maplarge_server
            role: master
        spec:
          terminationGracePeriodSeconds: 10
          securityContext:
            fsGroup: 1000
          containers:
          - name: ml-master-container
            image: {{ properties['image'] }}
            resources:
              requests:
                memory: {{ properties['minMemory'] }}Gi
                cpu: {{ properties['minCpu'] }}
              limits:
                memory: "20Gi"
                memory: {{ properties['maxMemory'] }}Gi
                cpu: {{ properties['maxCpu'] }}
            imagePullPolicy: Always
            env:
            - name: ML_REPL_ENABLED
              value: "true"
            - name: ML_REPL_MODE
              value: "master"
            - name: ML_NO_SSL
              value: "true"
            - name: ML_ALL_SSL
              value: "false"
            - name: ML_ROOT_PASS
              value: {{ROOT_PASS}}
            # - name: ML_SERVERS_MAIN
            #   value: '[{"domain":"104.197.120.209"}]'
            ports:
            - containerPort: 80
            volumeMounts:
            - name: ml-master-storage
              mountPath: /opt/maplarge/server/App_Data
          # imagePullSecrets:
          # - name: ml-docker-secret
      volumeClaimTemplates:
      - metadata:
          name: ml-master-storage
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: {{ properties['storage'] }}Gi

# Deploy MapLarge clone

- name: {{ CLUSTER_NAME }}-clone-ss
  type: {{ CLUSTER_TYPE }}:{{ SERVICE_COLLECTION }}
  metadata:
    dependsOn:
    - {{ CLUSTER_NAME }}-master-statefulset
    - {{ TYPE_NAME }}
  properties:
    apiVersion: v1
    kind: Service
    namespace: default
    metadata:
      name: ml-clone
      labels:
        app: slb_maplarge_server
    spec:
      ports:
      - port: 80
        name: web
      clusterIP: None
      selector:
        app: slb_maplarge_server
        role: clone

# Deploy MapLarge clone stateful set

- name: {{ CLUSTER_NAME }}-clone-statefulset
  type: {{ CLUSTER_TYPE }}-apps-v1beta2:{{ STATEFULL_SET_COLLECTION }}
  metadata:
    dependsOn:
    - {{ CLUSTER_NAME }}-clone-ss
    - {{ TYPE_NAME }}-apps-v1beta2
  properties:
    apiVersion: apps/v1beta2
    kind: StatefulSet
    namespace: default
    metadata:
      name: ml-clone-ss
    spec:
      selector:
        matchLabels:
          app: slb_maplarge_server
          role: clone
      serviceName: ml-clone-ss
      #podManagementPolicy: "Parallel"
      replicas: 1 
      template:
        metadata:
          labels:
            app: slb_maplarge_server
            role: clone
        spec:
          terminationGracePeriodSeconds: 10
          securityContext:
            fsGroup: 1000
          containers:
          - name: ml-clone-container
            image: {{ properties['image'] }}
            resources:
              requests:
                memory: {{ properties['minMemory'] }}Gi
                cpu: {{ properties['minCpu'] }}
              limits:
                memory: {{ properties['maxMemory'] }}Gi
                cpu: {{ properties['maxCpu'] }}
            imagePullPolicy: Always
            livenessProbe:
              exec:
                command:
                - cat
                - /opt/maplarge/server/version.txt
              initialDelaySeconds: 5
              periodSeconds: 5
              timeoutSeconds: 5
              failureThreshold: 3 #after 15 seconds, we mark pod dead
            readinessProbe:
              httpGet:
                path: /ServerSync/CheckPlayback
                port: 80
              initialDelaySeconds: 5
              periodSeconds: 5
              timeoutSeconds: 2
              failureThreshold: 60 #after 5 minutes, we mark pod unready
            env: 
            - name: ML_REPL_ENABLED
              value: "true"
            - name: ML_REPL_GREEDY
              value: "True"
            - name: ML_REPL_USER
              value: "clone@ml.com"
            - name: ML_REPL_PASS
              value: {{ROOT_PASS}}
            - name: ML_REPL_MODE
              value: "clone"
            - name: ML_REPL_NICE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ML_REPL_SELF_URL
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: ML_NO_SSL
              value: "true"
            - name: ML_ALL_SSL
              value: "false"
            # - name: ML_SERVERS_MAIN
            #   value: '[{"domain":"104.197.120.209"}]'
            ports:
            - containerPort: 80
            volumeMounts:
            - name: ml-clone-storage
              mountPath: /opt/maplarge/server/App_Data
          # imagePullSecrets:
          # - name: ml-docker-secret
      volumeClaimTemplates:
      - metadata:
          name: ml-clone-storage
        spec:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: {{ properties['storage'] }}Gi

# Deploy MapLarge load balancer

- name: {{ CLUSTER_NAME }}-ml-service
  type: {{ CLUSTER_TYPE }}:{{ SERVICE_COLLECTION }}
  metadata:
    dependsOn:
    - {{ CLUSTER_NAME }}-clone-ss
    - {{ TYPE_NAME }}
  properties:
    # This service is a node port in front of all runnng
    # ML instances
    apiVersion: v1
    kind: Service
    namespace: default
    metadata:
      name: ml-service
      labels:
        app: slb_maplarge_server
        role: balancer
    spec:
      type: NodePort
      ports:
      - port: 80
      selector:
        app: slb_maplarge_server
        #role: clone
        
# Deploy MapLarge ingress

- name: {{ CLUSTER_NAME }}-ml-ingress
  type: {{ CLUSTER_TYPE }}-v1beta1-extensions:{{ INGRESS_COLLECTION }}
  metadata:
    dependsOn:
    - {{ CLUSTER_NAME }}-clone-ss
    - {{ CLUSTER_NAME }}-address
    - {{ TYPE_NAME }}-v1beta1-extensions
  properties:
    apiVersion: extensions/v1beta1
    kind: Ingress
    namespace: default
    metadata:
      name: ml-ingress
      annotations:
        kubernetes.io/ingress.global-static-ip-name: {{ CLUSTER_NAME }}-address
        kubernetes.io/ingress.allow-http: "false"
        ingress.kubernetes.io/force-ssl-redirect: "true"
    spec:
      tls:
      - secretName: dummy
      backend:
        serviceName: ml-service
        servicePort: 80



